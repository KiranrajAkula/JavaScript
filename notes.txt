1)variables
2)functions
3)Arrays//important for interviews
4)Json//important for interviews
5)Promises
6)DOM manipulations//important for interviews
7)CallBacks//important for interviews
8) Event Handlings
9)Event Bubblings & event capturing
10)Deboucing
11)Throttling
12)AJAX calls
13)Regular Expressions
14)


Introduciton
************
=> java script is the scripting language
    types of languages 1)Scripting lang 2) Programming lang 3) Markup languages 
=> which is released by Netscape company
=> Current vesrion is ES13 
=> ES stands for ECMA script
=> which files are saved with .js extention
=> <Scipt> tag is used to declare the javascript to webpages
  ex :- <html>
            <head>
            <script> </script>
            <head>
        <html>
=> Js is used to develop the 1) Angular 2)React 3) Node 4) Vuejs 5) Static web pages to Dynamic web pages
=> js is executed in two ways 1) By Node tools  Nodejs 2) interpreter present into Browser 
=> synchronous execution: line by line excution is called synchronous excution
=>javascript is the object based Scripting Language
       1) window
       2)document
       3)console
       4)Date
       .....
       .....
Software Installations:
***********************
1) Download and install NodeJs

2)Download and install the Visual Studio Code

Execution of javascript:
************************
ex:-
        demo.js
                > node demo.js
=> == will compare only value left side value with right side value
=> but === will compare value and data type also 
Variables:-
***********
=>variables are used to store the data
=> string ,number, boolean, object, undefined,null,bigint,Symbol....
=> we can declare the variables by using "var" , "let" , and "const"
=>"let" and "const" keywords introduced in ES6
=> variables should contain a-z,A-Z, 0-9, $,_
=> variables should not start with digits
    syntax:-
            var/let/const variable_name = value;

Nnumbers:-
**********
1)decimal    2) float (or) double    3) hexadecimal   4) octal  5)binary

=>hexadecimal number will prefix with "0x"
=>octal number will prefix with "0o"
=>binary number will prefix with "0b"

boolean:-
*********
true or false // true = 1, false = 0

stirng:-
********
=> collection of characters called as  string
=> we can represent the string in some ways they are ' '," " ,` ` (backtick)
=> ` `(backtick) operator is introduced in ES6
=> ` ` operator called  as template literals
=> ` ` is used to define the paragraphs

undefined:-
***********
ex:- person is there but no use (work) is called undefined- undefined  (wipro employee bench fresher for 1 month no project)
=> have a mobile but no working is called undefined
=> object is there but no use with that nd also it occupies the memory((Browser memory)

Null:-
******
=> person is not there is called "null"
=> object is not there also it does not occupies any memory   

bigint:-
=> if we need to store large amount of number bigint will be used
=> which is suffixed with "n"
=> range 2^53 - 1

public Modifier:-
*****************
=> anybody can access but we dont have in javascript this concept

symbol datatype:-
*****************
=> inorder to protect the data we used symbol datatype 
 ex:-
   var data3 = symbol(100);
   console.log(data3) // symbol(100) but it is not correct 
console.log(typeof data3) // symbol 

typeof operator:-
*****************
=> is used to know the datatype
=> typeof 100 // number
=> typeof "hello" // string 
=> typeof true // boolean
=> typeof array // obj 
=> typeof null // obj
=> typeof undefined // undefined
=> typeof bigint  // bigint
=> typeof symbol // symbol

forloop:-
*********
=>looping is nothing but rotation is called iterations
for (var i=0(initialization);i<5(condition);i++(incrementing)){

}

variables:-
***********
=>var keyword allows the duplicate variables
=> let keyword wont allows the duplicate variables


block:-
*******
=> which represented with curly braces is called block to defiine the code

var data = 100 // global variable
 
{
 var data = 100 // local variable
}


variable declaration  = variable initialization  // variable accsessing

var                                                                     let
*****************                                                         *****************
=>var keyword introduced in ES1                     =>let keyword introduced in ES6
=> duplicate members allowed                        => duplicate members wont allowed
=> global polluting issue raised                    => we can overcome
=> variables hoisting raised                        => we can overcome

const keyword:-
***************
=> value cannot be modified that means we cannot overrided that type of things is called const 
ex:- while using the const we can modify the arr but not possible to create the duplicate const variabled like 1 acre cannot modified into 1 nd half but we can modifies the rooms 
     const data3 = 200;
     data3 = 200;// Type error

=>  const arr = [1,2,3,4,5] //arr is land and values are rooms
        arr= [];// Type Error

        arr[0] = 100;
        arr[3] = 400;
        arr[5] = 800;

        console.log(arr);


json object:
************
=> open the curly braces nd closing the curly braces is called json object
        ex:-   const obj = {"key" : "value"},"key" : "value"; // representation of json object 


functions():-
*************
=> particular bussiness logic called as funciton
=> funcitons are used to reuse the bussiness logic 
=> we will define the funcitons with "function" keyword
=> we have following funcitions
   1) Named functions
   2) Anonymous funcitons / Arrow functions / CallBack funcitions / Fat Arrow funcitions / Name less funcitions
   3) Rest parameters in funcitions
   4) default parameters in funcitions 
   5) optional parameters
   6) Generators
   7) IIFE  (immediate invokable funcitional Expressions)
   8) constructor funcitions 

   1)Named Functions:-
   *******************
   => the function with the name called as Named function
   => Function syntax devided into two parts 
    Syn:-
                function function_name(arg1, arg2, arg3....argn){
                                bussiness logic
                }
                function_name(parameter1,parameter2,.....parameter n);
=> function defenition :-
**************************
function function_name(arg1,arg2,.....argn{
        bussiness logic
})
=> function Calling:-
***************************
function_name(parameter1 ,parameter2,parameter3...parameter N);  

Rest parameters:-
*****************
=> it is used to store morethan one value in single argument
=> "..." called as spread operator
=> it is introduced in ES6
=>  we can have only "one" rest parameter per funciton
=> the occrence of rest parameter "should be last"
=> the default value of the  spread operator is empty array []
=> In this sread operator stores the values in the form of array manner.

Default Parameters:-
********************
=> while  defining the funcitons, we will assign some default values to parameters.
=> this concept is introduced in ES6

Arrows Functon:-
****************
=>The funcition without name called Anonymous funciton.
=> Anonymous funciton also called as Arrow funciton.
=> Arrow funcitons behaves like call back function.
=> we will represent arrow functions with "=>" symbol.
=> Arrow funtion is introduced in ES6.

syntax:-
********
1) funtion definition
2) funtion Calling
=> let is the suggestable keyword

        let variable_name= (arg1,arg2,arg3)=>{
                //business logics
        }
         variable_name(param1,parameter2,parameter3,....parameter n)

Git URL:

git remote add origin https://github.com/KiranrajAkula/JavaScript.git

IIFE:-
******
=> stands for Immediate Invokable Functional Expression
=> which is introduced into ES9
=> these funciton called as self invokable funcitons
=> in general we have funcition definition and funcition calling but come to IIFE here no need function calling only 
    function definition is require with this it will produce an output

syntax:-
********
        ((arg1,arg2,arg3....arg n)=>{
                business logic
        })(parameter1,parameter2,parameter3....parameters n)

Constructor Functions:-
***********************
=> class: collection of variables and methods(functions) is called as class //java ,c++,php ,.net oop's concepts 
=> java simle code:-
        class ClassA{
                studen s = "Kiran";
                public Method(){
                        return this.s;
                }
        }
         ClassA a = new Clas()
         a.Method();
=> constructor funcitons used to create the classes  like structures before ES6.
=> in constructor functions (funcitions and variables) should start with this keyword.
=> this keyword representating the current class member.
=> we will create the object with the help of new keyword.

Prototype:- imp
***********
=> obj1 means class obj. i.e let obj1 = new class_one()
=> prototype means current class. i.e class_one.prototype // it is used to extend the current class for further

Prototype Chaining(Inheritence):-
*********************************
=> linking one class to another class we can call Prototype Chaining
=> Aquiring the properties of parent to the child we can call Inhritence in this we call prototype chaining 

Generators:-
************
=> Generators controlls the "statements" in functions
=> Generators should have "*"
=> Each statement should have "yield" statement.
=> Generators will return "cursors" mechanism.
=> by using "cursors" we can controls statements. 

=> dafault position of the cursor is above first record among some records 
=>(iteration not completer) if we print the cursor line by line then wen need to go with the funciton that is like console(cursor.next());
=> what is the meaning of the false means am not the last person one more person is there behind 
   me if it is true that means that is the last stat and no other person available ofter that
=> if any statement availabe after the return statement that never executed that is yield statement 
   (done:true means no more iterations iteration completed)

Optional Parameters:-
*********************
=> while calling the funcitons we will make "few" parameters are optional.
=> this concept introduced in "ES6".
=> Optional parameters we will represent With "?".
=> optional parameter will work in "Typescript".
=> "Superset" (Advanced) of "Javascript" called as "Typescript".
=> we will save Typescript files with ".ts" extention.
=> Typescript follows "OOP's features". (Typescript is equalent to core java).
=> Typescript is a "Programming language".
=> Browsers wont understand the Typescript.
=> so, we need to convert Typescript to equalent Javascript
=> conversion from Typescript to equalent JavaScript called as "Transpilation".

Installation of Typescript:-
****************************

to Install typescript we need to install below command
>npm install -g typescript
        - npm stands for "node packaging manager".
        - -g stands for "global Installation".

Transpilation:-
***************
to do the Transpilation we need to follow some things
>tsc demo.ts   // tsc stands for typescript compiler
ofter compiling the demo.ts which is converted to demo.js as a Output
o/p
demo.js
ofter that to run converted js file below cmd is used 
>node demo.js



CallBack Function :-
********************
=> Passing one function to another function is called CallBack Functon.
  
  Example:-
        <script>
    function fun_one(arg1){
        console.log(arg1) //it will print only fun_two defintion
        console.log(arg1()) // but here we printing fun_two() output (return statements output)  // This is an fun_two definition
    }
    function fun_two(){
        return "This is an fun_two definition"
    }
    fun_one(fun_two) // here we get definiton as a output
</script>
 
 => here in above Example fun_two() def stored into arg1 
 => passing one function definiton another function as argument technically we can call CallBack function.


 Example:-
  <script>
    function fun_one(arg1, arg2, arg3) {
        console.log(arg1, arg2 ,arg3)
    }
    fun_one(function fun_two() {
        return "Iam the fun_two"
    },
        function fun_three() {
            return "am the fun_three"
        },
        function fun_four() {
            return " am the fun_four"
        }
    ) 
</script>

O/P  
****    this is an output for above prog
                ƒ fun_two() {
        return "Iam the fun_two"
    } ƒ fun_three() {
            return "am the fun_three"
        } ƒ fun_four() {
            return " am the fun_four"
        }


Arrays:-
*******
=> array - collection of "indexed" elements called as "array"
=> index start from "0"
=> we will represent the array by using []

length:
=> to find the length of array it is used.
ex:-
    arr = [1,2,3,4,5,6]
    console.log(arr.length)// 6


push():- this operation is used to add the new element into the array at the ending

pop();- this operation is used to remove the element from the array at or from the ending

unshift():-  this operation is used to add the new element into the array at the begining

shift():- this operation is used to remove the new element from the array at or from the begining

splice():-  this is used to delete the element at any place from the array 
    eX:-
        arr1.splice(1,2)   var_name.splice(Index position , No of elements to delete)  
            here arr1, is the variable name,
            1, is the position of the element,
            2, is the required no of elements to delete
    let arr1 = [10,20,30,40,50,60,70,80,90,100];

    arr1.splice(1,2)   
    console.log(arr1)                          //  [10, 40, 50,  60, 70, 80, 90, 100] 
                                            //  here we printing rest of the elements after the deleting the elements from the array


map():-
=> if we want to manipulate each and every element in the array here we have one function that is map() function.

syntax:-
  [arr].map(arrowfunction_arg);

  ex:-
        console.log(
    [1,2,3,4,5].map((elements,index)=>{

    })
);
Here in array each element(1,2,3,4,5) stored in elements and all the indexes(0,1,2,3,4) are stored into index



filter():-
**********
=> inorder to apply the conditions here we need to use the filter function.

