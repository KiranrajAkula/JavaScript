1)  variables                             // completed
2)  functions                             // completed
3)  Arrays//important for interviews      // completed
4)  Json//important for interviews        // completed
5)  Promises  
6)  DOM manipulations//important for interviews
7)  CallBacks//important for interviews    // completed
8)  Event Handlings
9)  Event Bubblings & event capturing
10  )Deboucing
11  )Throttling
12) AJAX calls                              // completed
13) Regular Expressions                     // completed



Introduciton
************
=> java script is the scripting language
    types of languages 1)Scripting lang 2) Programming lang 3) Markup languages 
=> which is released by Netscape company
=> Current vesrion is ES13 
=> ES stands for ECMA script
=> which files are saved with .js extention
=> <Scipt> tag is used to declare the javascript to webpages
  ex :- <html>
            <head>
            <script> </script>
            <head>
        <html>
=> Js is used to develop the 1) Angular 2)React 3) Node 4) Vuejs 5) Static web pages to Dynamic web pages
=> js is executed in two ways 1) By Node tools  Nodejs 2) interpreter present into Browser 
=> synchronous execution: line by line excution is called synchronous excution
=>javascript is the object based Scripting Language
       1) window
       2)document
       3)console
       4)Date
       .....
       .....
Software Installations:
***********************
1) Download and install NodeJs

2)Download and install the Visual Studio Code

Execution of javascript:
************************
ex:-
        demo.js
                > node demo.js
=> == will compare only value left side value with right side value
=> but === will compare value and data type also 
Variables:-
***********
=>variables are used to store the data
=> string ,number, boolean, object, undefined,null,bigint,Symbol....
=> we can declare the variables by using "var" , "let" , and "const"
=>"let" and "const" keywords introduced in ES6
=> variables should contain a-z,A-Z, 0-9, $,_
=> variables should not start with digits
=> we need to define one rule or cond to implement the var to check whether they or declared or not.
        i.e "use strict" this key word we need to use in ES6 may be
    syntax:-
            var/let/const variable_name = value;

Nnumbers:-
**********
1)decimal    2) float (or) double    3) hexadecimal   4) octal  5)binary

=>hexadecimal number will prefix with "0x"
=>octal number will prefix with "0o"
=>binary number will prefix with "0b"

boolean:-
*********
true or false // true = 1, false = 0

stirng:-
********
=> collection of characters called as  string
=> we can represent the string in some ways they are ' '," " ,` ` (backtick)
=> ` `(backtick) operator is introduced in ES6
=> ` ` operator called  as template literals
=> ` ` is used to define the paragraphs

undefined:-
***********
ex:- person is there but no use (work) is called undefined- undefined  (wipro employee bench fresher for 1 month no project)
=> have a mobile but no working is called undefined
=> object is there but no use with that nd also it occupies the memory((Browser memory)

Null:-
******
=> person is not there is called "null"
=> object is not there also it does not occupies any memory   

bigint:-
=> if we need to store large amount of number bigint will be used
=> which is suffixed with "n"
=> range 2^53 - 1

public Modifier:-
*****************
=> anybody can access but we dont have in javascript this concept

symbol datatype:-
*****************
=> inorder to protect the data we used symbol datatype 
 ex:-
   var data3 = symbol(100);
   console.log(data3) // symbol(100) but it is not correct 
console.log(typeof data3) // symbol 

typeof operator:-
*****************
=> is used to know the datatype
=> typeof 100 // number
=> typeof "hello" // string 
=> typeof true // boolean
=> typeof array // obj 
=> typeof null // obj
=> typeof undefined // undefined
=> typeof bigint  // bigint
=> typeof symbol // symbol

forloop:-
*********
=>looping is nothing but rotation is called iterations
for (var i=0(initialization);i<5(condition);i++(incrementing)){

}

variables:-
***********
=>var keyword allows the duplicate variables
=> let keyword wont allows the duplicate variables


block:-
*******
=> which represented with curly braces is called block to defiine the code

var data = 100 // global variable
 
{
 var data = 100 // local variable
}


variable declaration  = variable initialization  // variable accsessing

var                                                                     let
*****************                                                         *****************
=>var keyword introduced in ES1                     =>let keyword introduced in ES6
=> duplicate members allowed                        => duplicate members wont allowed
=> global polluting issue raised                    => we can overcome
=> variables hoisting raised                        => we can overcome

const keyword:-
***************
=> value cannot be modified that means we cannot overrided that type of things is called const 
ex:- while using the const we can modify the arr but not possible to create the duplicate const variabled like 1 acre cannot modified into 1 nd half but we can modifies the rooms 
     const data3 = 200;
     data3 = 200;// Type error

=>  const arr = [1,2,3,4,5] //arr is land and values are rooms
        arr= [];// Type Error

        arr[0] = 100;
        arr[3] = 400;
        arr[5] = 800;

        console.log(arr);


json object:
************
=> open the curly braces nd closing the curly braces is called json object
        ex:-   const obj = {"key" : "value"},"key" : "value"; // representation of json object 


functions():-
*************
=> particular bussiness logic called as funciton
=> funcitons are used to reuse the bussiness logic 
=> we will define the funcitons with "function" keyword
=> we have following funcitions
   1) Named functions
   2) Anonymous funcitons / Arrow functions / CallBack funcitions / Fat Arrow funcitions / Name less funcitions
   3) Rest parameters in funcitions
   4) default parameters in funcitions 
   5) optional parameters
   6) Generators
   7) IIFE  (immediate invokable funcitional Expressions)
   8) constructor funcitions 

   1)Named Functions:-
   *******************
   => the function with the name called as Named function
   => Function syntax devided into two parts 
    Syn:-
                function function_name(arg1, arg2, arg3....argn){
                                bussiness logic
                }
                function_name(parameter1,parameter2,.....parameter n);
=> function defenition :-
**************************
function function_name(arg1,arg2,.....argn{
        bussiness logic
})
=> function Calling:-
***************************
function_name(parameter1 ,parameter2,parameter3...parameter N);  

Rest parameters:-
*****************
=> it is used to store morethan one value in single argument
=> "..." called as spread operator
=> it is introduced in ES6
=>  we can have only "one" rest parameter per funciton
=> the occrence of rest parameter "should be last"
=> the default value of the  spread operator is empty array []
=> In this sread operator stores the values in the form of array manner.

Default Parameters:-
********************
=> while  defining the funcitons, we will assign some default values to parameters.
=> this concept is introduced in ES6

Arrows Functon:-
****************
=>The funcition without name called Anonymous funciton.
=> Anonymous funciton also called as Arrow funciton.
=> Arrow funcitons behaves like call back function.
=> we will represent arrow functions with "=>" symbol.
=> Arrow funtion is introduced in ES6.

syntax:-
********
1) funtion definition
2) funtion Calling
=> let is the suggestable keyword

        let variable_name= (arg1,arg2,arg3)=>{
                //business logics
        }
         variable_name(param1,parameter2,parameter3,....parameter n)

Git URL:

git remote add origin https://github.com/KiranrajAkula/JavaScript.git

IIFE:-
******
=> stands for Immediate Invokable Functional Expression
=> which is introduced into ES9
=> these funciton called as self invokable funcitons
=> in general we have funcition definition and funcition calling but come to IIFE here no need function calling only 
    function definition is require with this it will produce an output

syntax:-
********
        ((arg1,arg2,arg3....arg n)=>{
                business logic
        })(parameter1,parameter2,parameter3....parameters n)

Constructor Functions:-
***********************
=> class: collection of variables and methods(functions) is called as class //java ,c++,php ,.net oop's concepts 
=> java simle code:-
        class ClassA{
                studen s = "Kiran";
                public Method(){
                        return this.s;
                }
        }
         ClassA a = new Clas()
         a.Method();
=> constructor funcitons used to create the classes  like structures before ES6.
=> in constructor functions (funcitions and variables) should start with this keyword.
=> this keyword representating the current class member.
=> we will create the object with the help of new keyword.

Prototype:- imp
***********
=> obj1 means class obj. i.e let obj1 = new class_one()
=> prototype means current class. i.e class_one.prototype // it is used to extend the current class for further

Prototype Chaining(Inheritence):-
*********************************
=> linking one class to another class we can call Prototype Chaining
=> Aquiring the properties of parent to the child we can call Inhritence in this we call prototype chaining 

Generators:-
************
=> Generators controlls the "statements" in functions
=> Generators should have "*"
=> Each statement should have "yield" statement.
=> Generators will return "cursors" mechanism.
=> by using "cursors" we can controls statements. 

=> dafault position of the cursor is above first record among some records 
=>(iteration not completer) if we print the cursor line by line then wen need to go with the funciton that is like console(cursor.next());
=> what is the meaning of the false means am not the last person one more person is there behind 
   me if it is true that means that is the last stat and no other person available ofter that
=> if any statement availabe after the return statement that never executed that is yield statement 
   (done:true means no more iterations iteration completed)

Optional Parameters:-
*********************
=> while calling the funcitons we will make "few" parameters are optional.
=> this concept introduced in "ES6".
=> Optional parameters we will represent With "?".
=> optional parameter will work in "Typescript".
=> "Superset" (Advanced) of "Javascript" called as "Typescript".
=> we will save Typescript files with ".ts" extention.
=> Typescript follows "OOP's features". (Typescript is equalent to core java).
=> Typescript is a "Programming language".
=> Browsers wont understand the Typescript.
=> so, we need to convert Typescript to equalent Javascript
=> conversion from Typescript to equalent JavaScript called as "Transpilation".

Installation of Typescript:-
****************************

to Install typescript we need to install below command
>npm install -g typescript
        - npm stands for "node packaging manager".
        - -g stands for "global Installation".

Transpilation:-
***************
to do the Transpilation we need to follow some things
>tsc demo.ts   // tsc stands for typescript compiler
ofter compiling the demo.ts which is converted to demo.js as a Output
o/p
demo.js
ofter that to run converted js file below cmd is used 
>node demo.js



CallBack Function :-
********************
=> Passing one function to another function is called CallBack Functon.
  
  Example:-
        <script>
    function fun_one(arg1){
        console.log(arg1) //it will print only fun_two defintion
        console.log(arg1()) // but here we printing fun_two() output (return statements output)  // This is an fun_two definition
    }
    function fun_two(){
        return "This is an fun_two definition"
    }
    fun_one(fun_two) // here we get definiton as a output
</script>
 
 => here in above Example fun_two() def stored into arg1 
 => passing one function definiton another function as argument technically we can call CallBack function.


 Example:-
  <script>
    function fun_one(arg1, arg2, arg3) {
        console.log(arg1, arg2 ,arg3)
    }
    fun_one(function fun_two() {
        return "Iam the fun_two"
    },
        function fun_three() {
            return "am the fun_three"
        },
        function fun_four() {
            return " am the fun_four"
        }
    ) 
</script>

O/P  
****    this is an output for above prog
                ƒ fun_two() {
        return "Iam the fun_two"
    } ƒ fun_three() {
            return "am the fun_three"
        } ƒ fun_four() {
            return " am the fun_four"
        }


Arrays:-
*******
=> array - collection of "indexed" elements called as "array"
=> index start from "0"
=> we will represent the array by using []

length:
=> to find the length of array it is used.
ex:-
    arr = [1,2,3,4,5,6]
    console.log(arr.length)// 6


push():- this operation is used to add the new element into the array at the ending

pop();- this operation is used to remove the element from the array at or from the ending

unshift():-  this operation is used to add the new element into the array at the begining

shift():- this operation is used to remove the new element from the array at or from the begining

splice():-  this is used to delete the element at any place from the array 
    eX:-
        arr1.splice(1,2)   var_name.splice(Index position , No of elements to delete)  
            here arr1, is the variable name,
            1, is the position of the element,
            2, is the required no of elements to delete
    let arr1 = [10,20,30,40,50,60,70,80,90,100];

    arr1.splice(1,2)   
    console.log(arr1)                          //  [10, 40, 50,  60, 70, 80, 90, 100] 
                                            //  here we printing rest of the elements after the deleting the elements from the array


map():-
=> if we want to manipulate each and every element in the array here we have one function that is map() function.

syntax:-
  [arr].map(arrowfunction_arg);

  ex:-
        console.log(
    [1,2,3,4,5].map((elements,index)=>{

    })
);
Here in array each element(1,2,3,4,5) stored in elements and all the indexes(0,1,2,3,4) are stored into index



filter():-
**********
=> inorder to apply the conditions here we need to use the filter function.





reduce():
*********
=> reduce function is used to find the sum of elements or inder to perform addition of elements.

reduceRight():-
***************
=> reduceRight function is used to find summation from right to left


slice():
********
=> slice funtion will be used to get particular elements from the array.

 syntax:-
            var_name(arrays).slice(included_index, excluded_index)

ex:
    let arr1 = [10,20,30,40,50,60,70,80,90,100]

        console.log(arr1.slice(4,6))   //[ 50, 60 ]  here the 4th position of element will be included and 6th position of element 
                                    will be excluded

splice() VS slice():
=> splice is used to in order to remove or delete the partucular elements from an array,
=> but here comes to slice it is used to in order to get or print particular element from an array


flat():-
*********
=> flat funtion is used to inorder to convert the multi - dimentional array to single dimentional array     
ex:-
console.log(
    [[10],[20],[30]].flat(1)  //[ 10, 20, 30 ] It is used inorder to convert mul-array to single-array
    
)

findIndex():-
***************
=> findIndex function is used to know the index of elements in array


indexOf():-
***********
=> index of function wont create indexes for repeated (duplicate) elements.
=> while we print the duplicate and original indexes if the indexes un-match that cond is false means it won't print the value or 
    wont return anything.


copyWithin():-
**************
=> copyWithin function will shift the indexes 
=> inoder to shift the indexes we need to go for copyWithin function.

[10,20,30,40,50,60,70,80,90,100]

copyWithin(4) // means the index of 4 is 50 then the element count is started from 5 onwords


sort():-
********
=> to sort the elements eighter asending order or decending order then we need to go for sort function
=> arg1 - arg2 is called ascending order.
=> arg2 - arg1 is called decending order.



==> in arrays inorder to know the whether the element is available or not in an array here we have two 
apporaches 
1)includes(): it is a type of boolean function.
2)find(): it is a type of number function.

includes():-
************
=> it will give an output in the form of boolean i.e true or false
=> includes() function is used in order to check whether the require element is present(available) or not
=> if the require element is available then is will return the output as true other wise false.

ex:

    let arr10 = [1,2,3,4,5,6];
    console.log(arr10.includes(3)) //true
    console.log(arr10.includes(10)) //false
    
find():-
*********
=> but here it will give the output in the form of number 
=> here we have another apporach to know the availability of the element in an array that is find().
=> find() is used to know the availability of the element 
=> if it is available it returns the same element or searched element if not availabe it returns undefined.

ex:-
        let arr = [1,2,3,4,5,6,7,8];
     console.log(arr.find((element,index)=>{
        return element == 30;        //3 if it is present then it will return 3 other wise undefined
     })
     )


trim():-
*********
=> tirm() function is used in order to remove the white spaces in any string
=> it may be starting and ending.

types of trim() funcitons:
1) trimStart()
2) trimEnd()

ex:-
     console.log(
       " Kiranraj ".trim().length                                              // with spaces here the size is 10( Before the trim )  after the applying trim() function the length is 8 
     )


1) trimStart():-
***************
=> here in this trimStart the begining of the space will be removed.

ex:-
    console.log(
         " kiranraj ".trimStart().length            // 9 is the output y bcz here starting of the space is removed not end
     )

2) tirmEnd():-
**************
=> here in this trimEnd the ending of the spaces will be 


padStart():-
***********
=> if there are requied no of charcters are not available then we need to place to indicate not enough characters we 
need to go for padStart
=>in padStart indications of the symbol starts from the begining 

console.log(
         "kiranraj".padStart(15,"*")        //*******kiranraj
     )
padEnd():-
**********
=> in padEnd() indications of the symabol starts form the ending
     console.log(
         "kiranraj".padEnd(15,"*")          //kiranraj*******
     )

both padStart() and padEnd():-
*****************************


console.log(
         "kiranraj".padStart(15,"&").padEnd(20,"*")    // &&&&&&&kiranraj*****
     )

=================================================================================

Json:-
*******
=> Json stands for JavaScript Object Notation.
=> Json also called as JavaScript Objects.
=> we can exchange(frontend->bckend->serverdatabase visa-a-versa) the data in full stack application in two ways.
    1)XML (it is heavy weith apporach that means it will take more Ram memory or it will create burdon on out Ram consumption)
    2)JSON (it is light weigth apporach that means it will take less Ram memory or it won't create burdon on Ram memory)
=> JSON data is suggested while tranfering the data.

Syntax:-

    Objects -----> { }
    Arrays  -----> [ ]
    data    -----> Key & value pairs
                    key and value separated by using ":"
                    pairs separated by using ","
                    in order to access the data we need to use "." dot notaion.


iteration of json objects:
*************************
=> Which is introduced at ES6.
=> for of...loop can be defined as follows.
    Syntax:-   
            for (typeOf_variable var_name of object_name ){ }

=> in order to get only keys we use one predefined obj that is "Object"  and here we hava one function "keys" then we 
we need to supply object_name
    ex:
         Object.keys(obj)

=> in order to get only values we use one predefined obj that is "Object"  and here we hava one function "values" then we 
we need to supply object_name


Deep Copy:
**********
=> Making xerox copy from Original copy technically we can call deep copy.
=> which is implemented with help of "spread(...)" operator.

Ex:
    let original = {
         "key1":"value_1"
     }
     let xerox = { ...original}         // deep copy

     original.key1 = "Original Copy";
     xerox.key1 = "Xerox Copy";

     console.log(original)      //{key1: 'Original Copy'}
     console.log(xerox)         //{key1: 'Xerox Copy'}

=> inoder to delete the particular key here we used delete key word

    Ex:
        <script>
    let obj1 = {
        "key1":"value_1",
        "key2":"value_2",
        "key3":"value_3"
    }

    console.log(obj1)       //{key1: 'value_1', key2: 'value_2', key3: 'value_3'}
    delete obj1.key1;
    console.log(obj1)       //{key2: 'value_2', key3: 'value_3'}  here the key3 is deleted
</script>


Uses with spread operator(...):-
*******************************
=> deeo Copy(Cloning). here not effected to the xerox copy
=> concatinating.  but here effected to the Xerox Copy also

Ex:-
    concatinating

    <script>
     let obj1 = {"key1": "value1"}
     let obj2 = {"key2": "value2"}
     let obj3 = {"key3": "value3"}
     let obj4 = {...obj1,...obj2,...obj3}

     console.log(obj4)      //{key1: 'value1', key2: 'value2', key3: 'value3'}  Concatenation with sperad operator
 </script>

 freeze():-
 => freeze function is used to lock the object that means we can only read the data ofobjects of keys and values
    and  also here deletion ,updation , adding.

    freeze                                                      seal
    "read" allowed                                        "read" allowed
    write not allowed                                   write not allowed
    update not allowed                                  "update" allowed
    delete not allowed                                  not allowed


defineProperty():-
******************
=> which is used to and one key and value(property) to the json object 
=> in this at a time only we can add one key and value

    Ex:-
            <script>
        let obj = {"key1":"hello_1"}

        // add key2 ------ disable update and delete
        // add key2 ------  enable update and delete

        Object.defineProperty(obj,"key2",{value:"hello_2",writable:false});  


        Object.defineProperty(obj,"key3",{value:"hello_3", writable:true});

        console.log(obj)            //{key1: 'hello_1', key: 'hello_2', key3: 'hello_3'}

        obj.key2 = "Welcome_2";
        obj.key3 = "Welcome_3";

        console.log(obj)            //{key1: 'hello_1', key2: 'hello_2', key3: 'Welcome_3'} // here key2 value not updated bcz of writable:false but key3 updated bcz of writable: true 


        delete obj.key2;
        delete obj.key3;

        console.log(obj)       //{key1: 'hello_1', key2: 'hello_2', key3: 'Welcome_3'} // here nothing changes happend bcz we can able to read and update but we can't able to delete key values
    </script>


defineProperties():-
********************
=> defineProperties() is used to add more than one key and value(property) to the json obj.
=> here we can add at a time more than one not like defineProperty()

ways to accessing the data:
 here we can access the data in 4 ways they are

=> 1) Dot notation( " . ") :
         here if want to access the key with a "stirng" then we need to go for "." dot notation.

=> 2) Square notation([ ]):
         here if want ot access the key with a "number" and "string" also then we need to go for "[ ]" Arrays notation.
         here Square Notation( [] ) is the boss bcz it can handle number as well as string.
=> 3) De-Structuring :-
         here by structing we can access the data.
=> 4) for.....in loop

    Ex:-

    <script>
        let obj = {
            "key1":"value_1",
            "key2":"value_2",
            "key3":"value_3"
        }
        
        console.log(obj.key1, obj.key2, obj.key3);      //value_1 value_2 value_3

        console.log(obj["key1"], obj["key2"], obj["key3"])  //value_1 value_2 value_3

        const { key1, key2, key3 } = obj;       // this process technically we can call de-structuring

        console.log(key1,key2,key3);            // value_1 value_2 value_3

        for (let key in obj ){
            console.log(obj[key])       //value_1 value_2 value_3
        }
    </script>


   => In order to Convert the object to json here we have one predefined function.
            1) JSON.stringfy() ---- obj  to  string
            2) JSON.parse() ----- string to obj

    Ex:-
        <script>
        let obj = {'sub_one':'Angular13'}
        console.log( typeof obj)             // object

        let str = JSON.stringify(obj)
        console.log(typeof str)                // string

        let obj1 = JSON.parse(str);
        console.log(typeof obj1)        //  object
    </script>

   => In order to convert the string to json here we have one predefined funciton. 

   => hasOwnProperty() function checks that whether the property is available or not.

   Ex:-
        <script>
        let obj = { "key1":"Hello_1","key2":"Hello_2","key3":"Hello_3"};

        console.log(obj.hasOwnProperty("key1"));        //true
        </script>


entries():-
***********
=> entries() function is used to convert Json to Array.

    Ex:-
        <script>
            let obj = {         // convert Json object to Array
            "a":"b",
            "c":"d",
            "e":"f"
            };
            let arr = Object.entries(obj)

            console.log(arr)
        </script>

assign():-
***********
=> assign() is used to concatinate the key and values into one object.


JSON Server:-
**************
=> Requesting the requesests such as post, get these kind of requesests technically we can call rest api's.
=> or creating the url's technically we can call rest api's
=> we can develop rest api's with the help of Json server.
=> Ex:-  GET , POST , PUT , DELETE , ......
=> json Server by default running on port number "3000". (port number is nothing but it is like a door name of a home)
=> we will install JSON server by using folloing command.
    > npm install -g json-server    // npm - node package manager
                                    // -g global installation
=> to know the version of JSON server 
    >json-server --version
=> we will load the data in JSON server by using folloing command.
    > json-server --watch <name_file>.json
=> we will test rest api's with "Postman".

=>  http://localhost:3000/products

=> what ever we got this url this url any body can use that means java people, .net people can use, Angular people can connect,
    reactjs people can connect , vuejs people can conect, python people can connect ,testing people can connect.
    so these kind of information we can call rest api's.

=> POST: sending the data to the server we can call Post request(Sending).

=> GET: Getting the data from the server we can call Get request(Getting).

=> PUT: Updating the object data by Requesting the server we can call Put request(Updating).

=> DELETE: Deleting the object data from the server we can call Delete request(Deleting).

=> Particular Data of some thind we need to type that id
    http://localhost:3000/employee/777

=> searching Based on conditions here we taken name and e_sal.
    http://localhost:3000/employee?name=e_one&e_sal=10000

    http://localhost:3000/employee?id=555&e_sal=50000

    http://localhost:3000/employee?_limit=4&_sort=e_sal&_order=desc

=> to get limited no of records based on cond 
    http://localhost:3000/employee?_limit=4

=> to implement the slice operation we use like this
    http://localhost:3000/employee?_start=1&_end=3

    http://localhost:3000/employee?_start=1&_end=3&_sort=id&_order=desc

=> In order to perform the order and sort below mentioned commands used.
    http://localhost:3000/products?_sort=id&_order=desc 

=> Official website for json server operations
    https://www.npmjs.com/package/json-server

=> Operators  _gte -- Greater than or equlto >=
              _lte -- Less than or equal to <=

=> greate than or equal to >= 
    Ex: 
        http://localhost:3000/employee?e_sal_gte=30000

=> Less than or equal to <= 
    Ex: 
        http://localhost:3000/employee?e_sal_lte=30000

=> if we dont want to include any record then we need to specify one cond
    Ex:
        http://localhost:3000/employee?id_ne=111

        http://localhost:3000/employee?e_sal_ne=40000

=> In json inoder to search we use "q" oprator is called searching operator.

    http://localhost:3000/employee?q=10000


Data Structures:-
****************
=> in json objects, if we use "json objects as keys" automatically overrding will be happening.
=> to overcome above issue , Netscape released the data structures. 
    they are 
    1) Map
    2) WeakMap
    3) Set 
    4) WeakSet


    Ex:-

        <script>
            let obj = {};

            let key1 = {};
            let value1 = "value_1"

            let key2 = {};
            let value2 = "value_2";

            obj[key1] = "value_1"
            obj[key2] = "value_2"
            console.log(obj)      //{[object Object]: 'value_2'}        // here we passed two key&value pairs but we are getting only one that is value_2
                                                                // so here we have draw back bcz of this reason net scape comp introduced to overcome this 
                                                                //problem we need a datastructures concepts. 

        </script>

=> creating obj to the datastructure

     let map = new Map();

=> in order to know the api's of the map object we need to use dir() function.
    let map = new Map();
        console.dir(map)

    1) Clear(): to clear the all the key and value pairs of the map obj.

    2) Map(): consturctor is used to create the object to the Map().

    3) delete(): in order to delete key and value pair from map object.

    4) entries() , forEach() , for...of() : in order to iterate map object then we need to go for these iterations.

    5) get(): is used to get in data from the map object.

    6) has(): in order to check whether the key present or not 

    7) keys(): we can get all the keys by using keys() map.

    8) set(): in order to add the data to the object we need to use set() function.

    9) size(): in order to know the size of the map we need to use size() function.

    10) values(): in order to get all values from the map we need to use values() function.

WeakMap():
**********
=> WeakMap() is used to overcome the loophole of the Map() but the result of the prog vary from chrome to online editor.
    
    Ex:- 
        {
            let x = "key1";

            var map = new Map();

            map.set(x , "Hello_1" );
        }
            console.log(map)
                                => here we got out put as { 'key1' => 'Hello_1' } with Map() function.
                                => here we got an error with WeakMap if we place instead of Map() function.

=> In WeakMap() keys should be in json format
=> apart from the json object it wont allow other things

    Ex:- 
         <script>
        let weakmap = new WeakMap();            // In WeakMap() keys should be in json format
                                                // apart from the json object it wont allow other things
         weakmap.set({},"value")
         console.log(weakmap)       //{{…} => 'value'}
    </script>

Set():-
*******
=> which also like a WeakMap() 
=> to know the functions of set() we need to type following thing
        let set = new Set();
        console.dir(set)


Spread VS Rest :-
*****************
=> based on the situation people will call Rest parameter and Spread Operator which are introduced at ES6 version
=> it is like a single person two names 
=> if we use "..." opeator for merging (Concatenation) purpose then we can call Spread Operator.
    below shown two secnarios this "..." opeator called Spread Operator.
    Ex:-
        <script>
            let arr1 = [1,2,3];
            let arr2 = [4,5,6];

            let arr3 = [...arr1 , ...arr2]

            console.log(arr3)   //[1 2 3 4 5 6 ]
        </script>

    Ex:-
        <script>
            let obj1 = {
                "name":"kiranIT",
                "Sub": "Angular",
                "cost":7000
            }
            let obj2 = {
                ...obj1,
                "Sub":"Java",
                                    // here instead of writing same data(repeated data) i.e name and cost we need to place the rest operator
            
            }
            console.log(obj1)       //{name: 'kiranIT', Sub: 'Angular', cost: 7000}
            console.log(obj2)       //{name: 'kiranIT', Sub: 'Java', cost: 7000}
        </script>

Rest Parameter:-
****************
=> if we use "..." with the function as parameter then we can called Rest Parameter.

Regular Expressions:-
********************
=> if the given string if we want to know whether it contain numbers or not then we need to go for
    Regular Expressions.
=> while we print the string with match() function if they numbers are present it will give the output 
   as an array other wise it will give undefined.
=> match() function is used to apply the validations.

Website for form Validations:-
******************************
https://www.w3resource.com/javascript/form/javascript-sample-registration-form-validation.php 


AJAX calls:
***********
synchronous calls:-
*****************
=> if the client one request completed successfully then only client two can request visa-a-versa.
=> here not possible to request to the server at a time.
asynchronous calls:-
******************
=> if the n no of clients requests to the server at a time then we can call asynchronous calls.
=> if one client accessing the server may not effect to the accessing  of other client.
=> Execution of network calls parllelly is called asynchronous calls.
=> asynchronous calls also called as AJAX calls  

JavaScript:-
***********
XMLHTTPREQUEST: it is used to  make the asynchronous calls in javascript.

Jquery:-
*******
$.AJAX(): AJAX function is used to make asynchronous calls in Jquery

Angular:-
*********
HttpClient: In Angular HttpClient is used to make the asynchronous calls.

ReactJs:-
*********
AXIOS: AXIOS library is used to make the asynchronous calls in ReactJs.

VueJs:-
******
HTTP: is used to make the asynchronous calls in Vuejs.


Server Response contain 5 types of codes:
1XX -  INFORMATION RELATED
2XX -  SUCCSS
3XX -  RE-DIRECT
4XX -  CLIENT SIDE ERROR
5XX -  SERVER SIDE ERROR

